{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/admin/admin.component.ts","webpack:///src/app/admin/admin.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/badges/badges.component.ts","webpack:///src/app/badges/badges.component.html","webpack:///src/app/graphql.module.ts","webpack:///src/app/graphql/admin-gql.service.ts","webpack:///src/app/graphql/all-users-with-badges.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminComponent","allUsers","addBadge","base64textString","users","watch","valueChanges","pipe","result","data","evt","files","target","file","reader","FileReader","onload","_handleReaderLoaded","bind","readAsBinaryString","readerEvt","binaryString","btoa","console","log","userId","name","mutate","image_b64","subscribe","handleFileSelect","addBadgeToUser","selector","templateUrl","styleUrls","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","AppModule","declarations","providers","bootstrap","BadgesComponent","allUsersWithBadges","event","parentElement","scrollLeft","deltaY","preventDefault","uri","createApollo","httpLink","link","create","cache","GraphQLModule","provide","useFactory","deps","AddBadgeGQL","document","providedIn","AllUsersWithBadgesService","AllUsers","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { User, AllUsers } from '../graphql/all-users-with-badges.service';\nimport { map } from 'rxjs/operators';\nimport { AddBadgeGQL } from '../graphql/admin-gql.service';\n\n@Component({\n    selector: 'app-admin',\n    templateUrl: './admin.component.html',\n    styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n\n    users: Observable<User[]>;\n    name: string;\n    userId: number;\n    base64textString: string = \"\";\n\n    constructor(private allUsers: AllUsers, private addBadge: AddBadgeGQL) { }\n\n    ngOnInit(): void {\n        this.users = this.allUsers.watch().valueChanges.pipe(map((result) => result.data.users));\n    }\n\n\n\n    handleFileSelect(evt) {\n        var files = evt.target.files;\n        var file = files[0];\n\n        if (files && file) {\n            var reader = new FileReader();\n            reader.onload = this._handleReaderLoaded.bind(this);\n            reader.readAsBinaryString(file);\n        }\n    }\n\n    _handleReaderLoaded(readerEvt) {\n        var binaryString = readerEvt.target.result;\n\n        this.base64textString = 'data:image/png;base64,' + btoa(binaryString);\n    }\n\n    addBadgeToUser() {\n        console.log('this.userId ' + this.userId);\n        console.log('this.name ' + this.name);\n        console.log('this.base64textString ' + this.base64textString);\n\n        if (!!this.userId && !!this.name && !!this.base64textString) {\n            this.addBadge\n                .mutate({\n                    userId: this.userId,\n                    name: this.name,\n                    image_b64: this.base64textString,\n                })\n                .subscribe();\n        } else {\n            console.log(\"one is empty\");\n            \n        }\n\n    }\n\n}\n","<div>\n    \n</div>\n\n<div>\n    <div>\n        <select [(ngModel)]=\"userId\">\n            <option  [value]=\"i.id\" *ngFor=\"let i of users | async\">{{i.username}}</option>\n        </select>\n    </div>\n\n    <br>\n\n    <input type=\"text\" [(ngModel)]=\"name\">\n\n    <div>\n        <label for=\"filePicker\">Choose or drag a file:</label><br>\n        <input type=\"file\" id=\"filePicker\" (change)=\"handleFileSelect($event)\">\n    </div>\n    <br>\n    <div>\n        <h1>Base64 encoded version</h1>\n        <img src=\"{{base64textString}}\">\n    </div>\n    <div>\n        <button type=\"button\" (click)='addBadgeToUser()'>hey</button>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { BadgesComponent } from './badges/badges.component';\n\n\nconst routes: Routes = [\n    { path: '', component: BadgesComponent },\n    { path: 'admin', component: AdminComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {\n    title = 'angular-graphql';\n}\n","<div class=\"navbar\">\n    <a [routerLink]=\"['']\" routerLinkActive=\"active\" >Home</a>\n    <a [routerLink]=\"['/admin']\" routerLinkActive=\"active\" >Admin</a>\n</div>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GraphQLModule } from './graphql.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AdminComponent } from './admin/admin.component';\nimport { BadgesComponent } from './badges/badges.component';\nimport { from } from 'rxjs';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdminComponent,\n    BadgesComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    GraphQLModule,\n    HttpClientModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { User, AllUsersWithBadgesService } from '../graphql/all-users-with-badges.service';\n\n\n@Component({\n  selector: 'app-badges',\n  templateUrl: './badges.component.html',\n  styleUrls: ['./badges.component.scss']\n})\nexport class BadgesComponent implements OnInit {\n\n    users: Observable<User[]>;\n\n    constructor(private allUsersWithBadges: AllUsersWithBadgesService) { }\n\n    ngOnInit() {\n        this.users = this.allUsersWithBadges.watch().valueChanges.pipe(map((result)  => result.data.users));\n    }\n\n    onWheel(event: WheelEvent): void {\n        (<Element>event.target).parentElement.scrollLeft += event.deltaY;\n        event.preventDefault();\n     } \n\n     onWheelp(event: WheelEvent): void {\n        (<Element>event.target).parentElement.parentElement.scrollLeft += event.deltaY;\n        event.preventDefault();\n     } \n}\n","<div class=\"content \" role=\"main\">\n    <ul class=\"usersList\">\n        <li class=\"userRow\" *ngFor=\"let user of users | async\">\n            <div class=\"d-ib userName\">\n                <span class=\"center-text\">\n                    {{user.username}}\n                </span>\n            \n            </div>\n            <div class=\"d-ib badges\" (wheel)=\"onWheel($event)\">\n                <div class=\"badgeImg\" *ngFor=\"let badge of user.badges\" (wheel)=\"onWheelp($event)\">\n                    <img width=\"75\" src=\"{{badge.image_b64}}\" alt=\"{{badge.name}}\">\n                </div>\n            </div>\n            \n        </li>\n    </ul>\n</div>\n","import {NgModule} from '@angular/core';\nimport {APOLLO_OPTIONS} from 'apollo-angular';\nimport {ApolloClientOptions, InMemoryCache} from '@apollo/client/core';\nimport {HttpLink} from 'apollo-angular/http';\n\nconst uri = 'https://badge-db.herokuapp.com/v1/graphql'; // <-- add the URL of the GraphQL server here\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","import { Injectable } from '@angular/core';\nimport { Mutation } from 'apollo-angular';\nimport gql from 'graphql-tag';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AddBadgeGQL extends Mutation {\n\n    document = gql`\n      mutation addBadge($userId: Int!, $name: String!, $image_b64: String!) {\n        insert_badges(objects: {fk_user_id: $userId, image_b64: $image_b64, name: $name}) {\n            returning {\n                id\n            }\n          }\n      }\n    `;\n}\n","import { Injectable } from '@angular/core';\nimport { Query } from 'apollo-angular';\nimport gql from 'graphql-tag';\n\n\nexport interface User {\n    id: string;\n    username: string,\n    badges: Badge[]\n};\n\nexport interface Badge {\n    name: string,\n    image_b64: string\n}\n\nexport interface Response {\n    users: User[];\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AllUsersWithBadgesService extends Query<Response> {\n\n    document = gql`query UserList {\n        users {\n            id\n            username\n            badges {\n                name\n                image_b64\n            }\n        }\n      }\n    `;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AllUsers extends Query<Response> {\n\n    document = gql`query UserList {\n        users {\n            id\n            username\n        }\n      }\n    `;\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}